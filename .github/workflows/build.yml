name: Daily Build and Deploy

on:
  schedule:
    - cron: '0 5 * * 2,4,6'  # 每周二、四、六凌晨5点触发
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main 
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 确保有足够的权限来创建发布

    steps:
      # Checkout the current repository (if needed for any reason)
      - name: Checkout Current Repository
        uses: actions/checkout@v4

      # Clone the external repository to a specific path
      - name: Clone External Repository
        run: |
          git clone --branch master https://github.com/PlayPro/CoreProtect ./external-coreprotect
          git clone --branch master https://github.com/PlayPro/CoreProtect ./main-coreprotect

      # Modify pom.xml to set project.branch to 'development'
      - name: Set project.branch in pom.xml
        working-directory: ./external-coreprotect
        run: |
          sed -i '5s|<version>22.4</version>|<version>23.1</version>|' pom.xml
          sed -i '7s|<project.branch></project.branch>|<project.branch>development</project.branch>|' pom.xml
          cat pom.xml  # Print the modified file to confirm changes
      - name: Set project.branch2 in pom.xml
        working-directory: ./main-coreprotect
        run: |
          sed -i '5s|<version>22.4</version>|<version>23.0</version>|' pom.xml
          sed -i '7s|<project.branch></project.branch>|<project.branch>master</project.branch>|' pom.xml
          cat pom.xml  # Print the modified file to confirm changes

      # Modify build.gradle to set projectBranch to 'development'
      - name: Set projectBranch in build.gradle
        working-directory: ./external-coreprotect
        run: |
          sed -i "10s|^.*|String projectVersion = '23.1'|" build.gradle
          sed -i "11s|^.*|String projectBranch = 'development'|" build.gradle
          cat build.gradle  # Print the modified file to confirm changes
      - name: Set projectBranch in build.gradle2
        working-directory: ./main-coreprotect
        run: |
          sed -i "10s|^.*|String projectVersion = '23.0'|" build.gradle
          sed -i "11s|^.*|String projectBranch = 'master'|" build.gradle
          cat build.gradle  # Print the modified file to confirm changes

      # Verify POM file exists in the cloned repository
      - name: Verify POM file exists
        run: ls -la ./external-coreprotect/pom.xml || (echo "POM file not found" && exit 1)

      # Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('external-coreprotect/**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      # Build with Maven in the correct directory
      - name: Build with Maven
        run: mvn -B verify
        working-directory: ./external-coreprotect
      - name: BuildX with Maven
        run: mvn -B verify
        working-directory: ./main-coreprotect

      # List target directory contents to check if JAR files are generated
      - name: List target directory contents
        run: |
          ls -la ./external-coreprotect/target/
          ls -la ./main-coreprotect/target/

      # Find CoreProtect JAR File
      - name: Find CoreProtect JAR File
        id: find-jar
        run: |
          COREPROTECT_JAR=$(find ./external-coreprotect/target -name 'CoreProtect-*.jar')
          if [ -z "$COREPROTECT_JAR" ]; then
            echo "JAR file not found"
            exit 1
          else
            echo "COREPROTECT_JAR=$COREPROTECT_JAR" >> $GITHUB_ENV
            echo "Found JAR file: $COREPROTECT_JAR"
          fi
          COREPROTECT_JAR_=$(find ./main-coreprotect/target -name 'CoreProtect-*.jar')
          if [ -z "$COREPROTECT_JAR_" ]; then
            echo "JAR file not found"
            exit 1
          else
            echo "COREPROTECT_JAR=$COREPROTECT_JAR_" >> $GITHUB_ENV
            echo "Found JAR file 2: $COREPROTECT_JAR_"
          fi

      # Set date and short sha as tag name
      - name: Set date and short sha as tag name
        id: set_tag_name
        run: |
          SHORT_SHA=${GITHUB_SHA::10}
          DATE=$(date +'%Y-%m-%d')
          echo "TAG_NAME=$ 版本23.0为master;23.1为developmen -{DATE} -${SHORT_SHA}" >> $GITHUB_ENV
          echo "Tag name will be: ${DATE}-${SHORT_SHA}"

      # Upload Artifacts
      - name: Upload Artifacts 
        uses: actions/upload-artifact@v4  # 使用最新版本
        with:
          name: CoreProtect Artifacts
          path: ./main-coreprotect/target/*.jar  # 确保这个路径是正确的

      - name: Auto Release
        uses: marvinpinto/action-automatic-releases@latest  # 使用最新稳定版本
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ env.TAG_NAME }}
          prerelease: false
          files: ./main-coreprotect/target/*.jar
          
